/******************************************************************************************
Author: Jeff Pride
Company: TSI GLOBAL SYSTEMS LLC                                                                                           

******************************************************************************************/





/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "TSI - Password Utility"
#CATEGORY "46" "#TSI Modules"
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#OUTPUT_SHIFT		3       
#DEFINE_CONSTANT	MAX_PASSWORDS	10
#DEFINE_CONSTANT	MAX_PASSWORD_LEN	32         

#DEFINE_CONSTANT	PASSPULSE	100     


#HELP_BEGIN
FilePath must not contain "\". Use "/" to note path

#HELP_END

/*******************************************************************************************
  Include Libraries
*******************************************************************************************/
#INCLUDEPATH "C:\Users\jpride\source\repos\SecurityPasswordUtility\SecurityPasswordUtility\bin\Debug"
#USER_SIMPLSHARP_LIBRARY "SecurityPasswordUtility"
               

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
*******************************************************************************************/
DIGITAL_INPUT 	_skip_,
				_skip_,
				_skip_,
				Debug,
				_skip_,
				Initialize,
				_skip_,
				EnableAutoSave,
				Read,
				Write,
				_skip_,
				Compare;
                 

STRING_INPUT	InputForCompare$[MAX_PASSWORD_LEN],
				_skip_,
				_skip_,
				_skip_,
				_skip_,
				_skip_,
				_skip_,
				_skip_,
				_skip_,
				_skip_,
				_skip_,
				_skip_,
				_skip_,
				PasswordIn$[MAX_PASSWORDS][MAX_PASSWORD_LEN]; 

Digital_Output	DebuggingEnabled,
				FileFound,
				IsInitialized,
				AutoSaveEnabledFb,
				Reading,
				Writing,
				_skip_,
				AwaitingSave,
				_skip_,
				Fail,
				BackDoorPassSuccess,
				PasswordSuccess[MAX_PASSWORDS],
				_skip_;
				

STRING_OUTPUT	PasswordOut$[MAX_PASSWORDS]; 
           


/*******************************************************************************************
  Parameters
*******************************************************************************************/
INTEGER_PARAMETER	TimeoutMs;
STRING_PARAMETER	FilePath[128];
STRING_PARAMETER	BackDoorPass[MAX_PASSWORD_LEN];


/*******************************************************************************************
  Parameter Properties
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES TimeoutMs
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propDefaultValue = 8000d;
   propShortDescription = "time in ms to wait before writing user input to file";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES FilePath
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "/user/PasswordUtility/passwords.json";
   propShortDescription = "filepath and name of file. DO NOT USE '\'. Example /user/strings/mystrings.json";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES BackDoorPass
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "backdoor";
   propShortDescription = "Backdoor Password";
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Global Variables
*******************************************************************************************/
integer	ActiveStringCount;   
string	LocalPasswordList[MAX_PASSWORDS][MAX_PASSWORD_LEN] ;
PasswordUtility	pwordStoreCs;


/*******************************************************************************************
  Functions
*******************************************************************************************/

Function RegisterEvents()
{
	RegisterEvent(pwordStoreCs, PasswordListUpdated, OnPasswordListUpdated);		
	RegisterEvent(pwordStoreCs, IsInitialized, OnInitialized);	
	RegisterEvent(pwordStoreCs, ReadStarted, OnReadStarted);
	RegisterEvent(pwordStoreCs, ReadComplete, OnReadComplete);
	RegisterEvent(pwordStoreCs, WriteStarted, OnWriteStarted);
	RegisterEvent(pwordStoreCs, WriteComplete, OnWriteComplete);
	RegisterEvent(pwordStoreCs, FileFound, OnFileFound);
	RegisterEvent(pwordStoreCs, AutoSaveIsEnabled, OnAutoSaveIsEnabled);
	RegisterEvent(pwordStoreCs, AutoSaveIsDisabled, OnAutoSaveIsDisabled);
	RegisterEvent(pwordStoreCs, AwaitingSave, OnAwaitingSave);
	RegisterEvent(pwordStoreCs, NotAwaitingSave, OnNotAwaitingSave);		
}
                       


function SetAllDefinedStrings()
{
    integer i;

	for (i = 1 to ActiveStringCount)
	{
    	pwordStoreCs.SetPasswordFromSimpl(i-1,PasswordIn$[i]);
		LocalPasswordList[i-1] = PasswordIn$[i];
	}
}
         

function CountActiveStringSignals()
{
	integer i;

	for (i = MAX_PASSWORDS to 1 Step -1)
	{
    	if (isSignalDefined(PasswordIn$[i]))
		{
         	ActiveStringCount = i;
			if (Debug) { print("Password Utility - Active String Count: %d", ActiveStringCount); }
			break;
		}
	}
}

function CompareInput(string userInput)
{
	integer i,p;
	string s[32];
           
	s = userInput;

	if (s = "")
	{ 
		pulse(PASSPULSE, Fail);
		return;
	}

	if (s = BackDoorPass)
	{
    	pulse(PASSPULSE,BackDoorPassSuccess);
		return;
	}
     
	p = 0;
	for (i = 1 to ActiveStringCount)
	{
    	if (s = LocalPasswordList[i])
		{
    		Pulse(PASSPULSE, PasswordSuccess[i]);
			p = p + 1;
		}
	}
	
	if (p = 0)
	{
		Pulse(PASSPULSE, Fail);
	}

}

/*******************************************************************************************
  Event Handlers
*******************************************************************************************/
Change Debug
{
    pwordStoreCs.SetDebug(Debug);
	DebuggingEnabled = Debug;
}

Push Initialize
{
	pwordStoreCs.Initialize(FilePath, TimeoutMs);
}  
         

Push Read
{
	pwordStoreCs.ReadFile();
}
      

Push Write
{
	SetAllDefinedStrings();
	pwordStoreCs.WriteFile();
}

change EnableAutoSave
{
	pwordStoreCs.SetAutoSave(EnableAutoSave);
}
        

Threadsafe Change PasswordIn$
{
	integer el;

	el = getlastmodifiedarrayindex();
       
	if (IsInitialized)
	{	
		//this writes te a temp list in the class and outputs changes on the stringoutputs. But if a Read happens before these changes are written to file, it reverts back to the file contents
		//When compare is triggered, user input will be triggered against the LocalPasswordList even it hasnt been written yet.
		pwordStoreCs.SetPasswordFromSimpl(el-1, PasswordIn$[el]);
		LocalPasswordList[el] = PasswordIn$[el];
		PasswordOut$[el] = PasswordIn$[el];
	}
}
           

Push Compare
{
	integer i,p;
	string s[32];
           
	s = InputForCompare$;

	CompareInput(InputForCompare$);
}
           
eventHandler OnPasswordListUpdated(PasswordUtility sender, StringListUpdateEventArgs e )
{
	if (Debug)
	{
		print("Password Update Event!\n");
		print("Index: %d\n", e.StringIndex);
		print("String: %s\n", e.StringValue);
	}

	PasswordOut$[e.StringIndex] = e.StringValue;
	LocalPasswordList[e.StringIndex] = e.StringValue;
}

eventhandler OnInitialized(PasswordUtility sender, EventArgs e)
{
	IsInitialized = 1;
}
          

eventhandler OnReadStarted(PasswordUtility sender, EventArgs e)
{
	Reading = 1;
}


eventhandler OnReadComplete(PasswordUtility sender, EventArgs e)
{
	Reading = 0;
}


eventhandler OnWriteStarted(PasswordUtility sender, EventArgs e)
{
	Writing = 1;
}


eventhandler OnWriteComplete(PasswordUtility sender, EventArgs e)
{
	Writing = 0;
}

eventhandler OnFileFound(PasswordUtility sender, EventArgs e)
{
	FileFound = 1;
}

eventhandler OnAutoSaveIsEnabled(PasswordUtility sender, EventArgs e)
{
	AutoSaveEnabledFb = 1;
}


eventhandler OnAutoSaveIsDisabled(PasswordUtility sender, EventArgs e)
{
	AutoSaveEnabledFb = 0;
}

eventhandler OnAwaitingSave(PasswordUtility sender, EventArgs e)
{
	AwaitingSave = 1;
}

eventhandler OnNotAwaitingSave(PasswordUtility sender, EventArgs e)
{
	AwaitingSave = 0;
}





/*******************************************************************************************
  Main()
*******************************************************************************************/

Function Main()
{
	integer i;
    
	IsInitialized = 0;
	RegisterEvents();		

    WaitForInitializationComplete();
	CountActiveStringSignals();  

	if (FilePath != "")
	{          
		pwordStoreCs.Initialize(FilePath, TimeoutMs);	
	}
}


